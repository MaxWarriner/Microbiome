install.packages('knitr')
?qf
qf(0.95, df1 = N, df2 = k, lower.tail = F)
pf(2.388533, df1 = k-1, df2 = N-k)
N = 542
k = 5
pf(2.388533, df1 = k-1, df2 = N-k)
N = 542
k = 5
(rejection_statistic <- qf(0.95, df1 = k-1, df2 = N-k, lower.tail = T))
omega2 <- 0.23
(cohensf <- sqrt(omega2/(1-omega2)))
N*(cohensf^2)
n = 3
rejection_stat = qf(0.95, df1 = k-1, df2 = k*(n-1))
rejection_stat
p = pf(q = rejection_stat, df1 = k-1, df2 = k*(n-1), ncp = lambda)
lambda = n * k * cohensf^2
pf(q = rejection_stat, df1 = k-1, df2 = k*(n-1), ncp = lambda)
p = pf(q = rejection_stat, df1 = k-1, df2 = k*(n-1), ncp = lambda, lower.tail = F)
p
power <- function{k, omega2, desired_power}{
power <- function(k, omega2, desired_power){
cohensf <- sqrt(omega2/(1-omega2))
n = 3
repeat{
rejection <- rep(NA, 1000)
lambda = n * k * cohensf^2
rejection_stat = qf(0.95, df1 = k-1, df2 = k*(n-1))
p = pf(q = rejection_stat, df1 = k-1, df2 = k*(n-1), ncp = lambda, lower.tail = F)
if(p >= desired_power){
break
return(n)
}else{
n = n + 1
}
}
}
power(k = 5, omega2 = 0.14, desired_power = 0.8)
power(k = 5, omega2 = 0.14, desired_power = 0.8)
power <- function(k, omega2, desired_power){
cohensf <- sqrt(omega2/(1-omega2))
n = 3
repeat{
rejection <- rep(NA, 1000)
lambda = n * k * cohensf^2
rejection_stat = qf(0.95, df1 = k-1, df2 = k*(n-1))
p = pf(q = rejection_stat, df1 = k-1, df2 = k*(n-1), ncp = lambda, lower.tail = F)
if(p >= desired_power){
return(n)
break
}else{
n = n + 1
}
}
}
power(k = 5, omega2 = 0.14, desired_power = 0.8)
install.packages('pwr')
pwr::pwr.anova.test(k = 5, power = 0.8, f = sqrt(0.14/(1-0.14)))
n = 16
omega2 = 0.14
cohensf <- sqrt(omega2/(1-omega2))
lambda = n * k * cohensf^2
ggdat <- tibble(x = seq(0, 5, length.out = 1000),
h0 = df(q = x, df1 = k-1, df2 = k*(n-1)),
ha = df(1 = x, df1 = k-1, df2 = k(n-1), ncp = lambda))
ggdat <- tibble(x = seq(0, 5, length.out = 1000),
h0 = df(q = x, df1 = k-1, df2 = k*(n-1)),
ha = df(q = x, df1 = k-1, df2 = k(n-1), ncp = lambda))
library(tidyverse)
ggdat <- tibble(x = seq(0, 5, length.out = 1000),
h0 = df(q = x, df1 = k-1, df2 = k*(n-1)),
ha = df(q = x, df1 = k-1, df2 = k(n-1), ncp = lambda))
ggdat <- tibble(x = seq(0, 5, length.out = 1000),
h0 = df(x = x, df1 = k-1, df2 = k*(n-1)),
ha = df(x = x, df1 = k-1, df2 = k(n-1), ncp = lambda))
ggdat <- tibble(x = seq(0, 5, length.out = 1000),
h0 = df(x = x, df1 = k-1, df2 = k*(n-1)),
ha = df(x = x, df1 = k-1, df2 = k*(n-1), ncp = lambda))
View(ggdat)
ggplot(data = ggdat) +
geom_point(aes(x = x, y = h0)) +
geom_point(aes(x = x, y = ha))
ggdat <- tibble(x = seq(0, 5, length.out = 100000),
h0 = df(x = x, df1 = k-1, df2 = k*(n-1)),
ha = df(x = x, df1 = k-1, df2 = k*(n-1), ncp = lambda))
ggplot(data = ggdat) +
geom_point(aes(x = x, y = h0)) +
geom_point(aes(x = x, y = ha))
ggdat <- tibble(x = seq(0, 5, length.out = 10000),
h0 = df(x = x, df1 = k-1, df2 = k*(n-1)),
ha = df(x = x, df1 = k-1, df2 = k*(n-1), ncp = lambda))
ggplot(data = ggdat) +
geom_point(aes(x = x, y = h0)) +
geom_point(aes(x = x, y = ha))
ggdat <- tibble(x = seq(0, 10, length.out = 10000),
h0 = df(x = x, df1 = k-1, df2 = k*(n-1)),
ha = df(x = x, df1 = k-1, df2 = k*(n-1), ncp = lambda))
ggplot(data = ggdat) +
geom_point(aes(x = x, y = h0)) +
geom_point(aes(x = x, y = ha))
ggdat <- tibble(x = seq(0, 15, length.out = 10000),
h0 = df(x = x, df1 = k-1, df2 = k*(n-1)),
ha = df(x = x, df1 = k-1, df2 = k*(n-1), ncp = lambda))
ggplot(data = ggdat) +
geom_point(aes(x = x, y = h0)) +
geom_point(aes(x = x, y = ha))
ggdat <- tibble(x = seq(0, 12, length.out = 10000),
h0 = df(x = x, df1 = k-1, df2 = k*(n-1)),
ha = df(x = x, df1 = k-1, df2 = k*(n-1), ncp = lambda))
ggplot(data = ggdat) +
geom_point(aes(x = x, y = h0)) +
geom_point(aes(x = x, y = ha))
ggplot(data = ggdat) +
geom_point(aes(x = x, y = h0, color = "Null")) +
geom_point(aes(x = x, y = ha, color = "Alternative")) +
theme_bw() +
xlab('F') +
ylab('Density') +
ggtitle('Null vs. Alternative F Distribution')
ggplot(data = ggdat) +
geom_point(aes(x = x, y = h0, color = "Null")) +
geom_point(aes(x = x, y = ha, color = "Alternative")) +
theme_bw() +
xlab('F') +
ylab('Density') +
ggtitle('Null vs. Alternative F Distribution') +
theme(legend.title=element_blank())
install.packages('Rtools')
devtools::install_github("borenstein-lab/mimosa2", dependencies = T)
pkgbuild::has_build_tools(debug = TRUE)
install.packages("mimosa2", repos = "https://cloud.r-project.org")
install.packages(c("BiocManager", "devtools"))
BiocManager::install(c("edgeR", "limma", "DESeq2"))
install.packages(c("BiocManager", "devtools"))
setwd("C:/Users/12697/Documents/MATH481_Max_Alta/Network Analysis")
ps <- readRDS('microbiome.RDS')
tax <- ps@tax_table
library(pheatmap)
library(extrafont)
library(tidyverse)
library(RColorBrewer)
library(compositions)
library(phyloseq)
ps <- read_rds('microbiome.RDS')
sam <- ps@sam_data
tax <- data.frame(ps@tax_table@.Data)
abundance <- data.frame(ps@otu_table@.Data)
ps <- read_rds('categorized_data.RDS')
setwd("C:/Users/12697/Documents/Microbiome/Data Analysis")
ps <- read_rds('categorized_data.RDS')
setwd("C:/Users/12697/Documents/Microbiome/Data Analysis")
ps <- read_rds('categorized_data.RDS')
library(tidyverse)
ps <- read_rds('categorized_data.RDS')
sam <- ps@sam_data
sam <- data.frame(sam)
sam <- sam |>
rename(hygiene_index = Cleanliness_proxy,
SES_index = SEI_proxy)
View(sam)
sam$hygiene_index <- rep(0, 138)
sam$SES_index <- rep(0,138)
table(sam$Child.s_Fingernails_Trimmed, sam$Child_Has_Dirty_Fingernails)
sam$HIQ_index <- rep(0,138)
table(sam$Connection_to_Latrine)
sam$HSI_index <- rep(0,138)
table(sam$Latrine_Distance_from_House)
table(sam$Defecating_in_Open_Field)
for (i in 1:138){
if(sam$Frequency_of_Hand_Washing_After_Using_Toilet[i] == 'always'){
sam$hygiene_index[i] = sam$hygiene_index + 2
}else if(sam$Frequency_of_Hand_Washing_After_Using_Toilet[i] == 'sometimes'){
sam$hygiene_index[i] = sam$hygiene_index + 1
}
if(sam$Method_of_Washing_Hands_After_Toilet[i] == 'Soap and Water'){
sam$hygiene_index[i] = sam$hygiene_index + 2
}else if(sam$Method_of_Washing_Hands_After_Toilet[i] == 'Water'){
sam$hygiene_index[i] = sam$hygiene_index + 1
}
if(sam$Frequency_of_Using_School_Latrine[i] == 'always' | sam$Frequency_of_Using_School_Latrine[i] == 'sometimes'){
sam$hygiene_index[i] = sam$hygiene_index + 1
}
if(sam$Drink_Water_Directly_or_Treated.[i] == 'Treat'){
sam$hygiene_index[i] = sam$hygiene_index + 1
}
if(sam$Defecating_in_Open_Field[i] == 'never'){
sam$hygiene_index[i] = sam$hygiene_index + 1
}
if(sam$Child.s_Fingernails_Trimmed[i] == 'yes' & sam$Child_Has_Dirty_Fingernails == 'no'){
sam$hygiene_index[i] = sam$hygiene_index + 1
}
if(sam$Maternal_Education_Status[i] == 'Higher Education'){
sam$SES_index[i] = sam$SES_index + 3
}else if(sam$Maternal_Education_Status[i] == 'High School'){
sam$SES_index[i] = sam$SES_index + 2
}else if(sam$Maternal_Education_Status[i] == 'Primary School'){
sam$SES_index[i] = sam$SES_index + 1
}
if(sam$Electricity_in_House[i] == 'yes'){
sam$SES_index[i] = sam$SES_index + 1
}
if(sam$Family_Owns_Radio[i] == 'yes'){
sam$SES_index[i] = sam$SES_index + 1
}
if(sam$Family_Owns_Television[i] == 'yes'){
sam$SES_index[i] = sam$SES_index + 1
}
if(sam$Family_Member_with_Phone[i] == 'yes'){
sam$SES_index[i] = sam$SES_index + 1
}
if(sam$Urban.Rural[i] == 'Urban'){
sam$SES_index[i] = sam$SES_index + 1
}
if(sam$House_Floor_Material[i] == 'Cement' | sam$House_Floor_Material[i] == "Plastic Covered"){
sam$HIQ_index[i] = sam$HIQ_index + 2
}
if(sam$Connection_to_Latrine[i] == 'Sewage'){
sam$HIQ_index[i] = sam$HIQ_index + 2
}else if(sam$Connection_to_Latrine[i] == 'Well'){
sam$HIQ_index[i] = sam$HIQ_index + 1
}
if(sam$Potable_Water_in_House[i] == 'yes'){
sam$HIQ_index[i] = sam$HIQ_index + 1
}
if(sam$Kitchen_Has_Roof[i] == 'yes' & sam$Kitchen_Has_Wall == 'yes'){
sam$HIQ_index[i] = sam$HIQ_index + 1
}
if(sam$Family_Owns_Latrine[i] == 'yes'){
sam$HSI_index[i] = sam$HSI_index + 1
}
if(sam$Latrine_Distance_from_House[i] == '>20' | sam$Latrine_Distance_from_House[i] == '10-20'){
sam$HSI_index[i] = sam$HSI_index + 2
}else if(sam$Latrine_Distance_from_House[i] == '5-10'){
sam$HSI_index[i] = sam$HSI_index + 1
}
if(sam$Defecating_in_Open_Field[i] == 'never'){
sam$HSI_index[i] = sam$HSI_index + 1
}
}
for (i in 1:138){
if(sam$Frequency_of_Hand_Washing_After_Using_Toilet[i] == 'always'){
sam$hygiene_index[i] = sam$hygiene_index[i] + 2
}else if(sam$Frequency_of_Hand_Washing_After_Using_Toilet[i] == 'sometimes'){
sam$hygiene_index[i] = sam$hygiene_index[i] + 1
}
if(sam$Method_of_Washing_Hands_After_Toilet[i] == 'Soap and Water'){
sam$hygiene_index[i] = sam$hygiene_index[i] + 2
}else if(sam$Method_of_Washing_Hands_After_Toilet[i] == 'Water'){
sam$hygiene_index[i] = sam$hygiene_index[i] + 1
}
if(sam$Frequency_of_Using_School_Latrine[i] == 'always' | sam$Frequency_of_Using_School_Latrine[i] == 'sometimes'){
sam$hygiene_index[i] = sam$hygiene_index[i] + 1
}
if(sam$Drink_Water_Directly_or_Treated.[i] == 'Treat'){
sam$hygiene_index[i] = sam$hygiene_index[i] + 1
}
if(sam$Defecating_in_Open_Field[i] == 'never'){
sam$hygiene_index[i] = sam$hygiene_index[i] + 1
}
if(sam$Child.s_Fingernails_Trimmed[i] == 'yes' & sam$Child_Has_Dirty_Fingernails[i] == 'no'){
sam$hygiene_index[i] = sam$hygiene_index[i] + 1
}
if(sam$Maternal_Education_Status[i] == 'Higher Education'){
sam$SES_index[i] = sam$SES_index[i] + 3
}else if(sam$Maternal_Education_Status[i] == 'High School'){
sam$SES_index[i] = sam$SES_index[i] + 2
}else if(sam$Maternal_Education_Status[i] == 'Primary School'){
sam$SES_index[i] = sam$SES_index[i] + 1
}
if(sam$Electricity_in_House[i] == 'yes'){
sam$SES_index[i] = sam$SES_index[i] + 1
}
if(sam$Family_Owns_Radio[i] == 'yes'){
sam$SES_index[i] = sam$SES_index[i] + 1
}
if(sam$Family_Owns_Television[i] == 'yes'){
sam$SES_index[i] = sam$SES_index[i] + 1
}
if(sam$Family_Member_with_Phone[i] == 'yes'){
sam$SES_index[i] = sam$SES_index[i] + 1
}
if(sam$Urban.Rural[i] == 'Urban'){
sam$SES_index[i] = sam$SES_index[i] + 1
}
if(sam$House_Floor_Material[i] == 'Cement' | sam$House_Floor_Material[i] == "Plastic Covered"){
sam$HIQ_index[i] = sam$HIQ_index[i] + 2
}
if(sam$Connection_to_Latrine[i] == 'Sewage'){
sam$HIQ_index[i] = sam$HIQ_index[i] + 2
}else if(sam$Connection_to_Latrine[i] == 'Well'){
sam$HIQ_index[i] = sam$HIQ_index[i] + 1
}
if(sam$Potable_Water_in_House[i] == 'yes'){
sam$HIQ_index[i] = sam$HIQ_index[i] + 1
}
if(sam$Kitchen_Has_Roof[i] == 'yes' & sam$Kitchen_Has_Wall[i] == 'yes'){
sam$HIQ_index[i] = sam$HIQ_index[i] + 1
}
if(sam$Family_Owns_Latrine[i] == 'yes'){
sam$HSI_index[i] = sam$HSI_index[i] + 1
}
if(sam$Latrine_Distance_from_House[i] == '>20' | sam$Latrine_Distance_from_House[i] == '10-20'){
sam$HSI_index[i] = sam$HSI_index[i] + 2
}else if(sam$Latrine_Distance_from_House[i] == '5-10'){
sam$HSI_index[i] = sam$HSI_index[i] + 1
}
if(sam$Defecating_in_Open_Field[i] == 'never'){
sam$HSI_index[i] = sam$HSI_index[i] + 1
}
}
hist(sam$hygiene_index)
hist(sam$SES_index)
hist(sam$HSI_index)
hist(sam$HIQ_index)
table(sam$SES_index)
sam <- sam |>
mutate(hygiene_group = ifelse(hygiene_index <= 5, 'low', 'high'),
SES_group = ifelse(SES_index <= 4, 'low', 'high'),
HSI_group = ifelse(HSI_index <= 2, 'low', 'high'),
HIQ_group = ifelse(HIQ_index <= 2, 'low', 'high'))
sample_data(ps) <- sam
library(phyloseq)
sample_data(ps) <- sam
write_rds(ps, 'categorized_data.RDS')
ps <- read_rds('categorized_data.RDS')
sam <- ps@sam_data
library(BiocManager)
library(phyloseq)
library(tidyverse)
library(dplyr)
library(ggrepel)
library(patchwork)
library(RColorBrewer)
library(rlang)
library(MicrobiotaProcess)
library(vegan)
library(dplyr)
library(ALDEx2)
library(microbiomeMarker)
library(ggsci)
library(ggpubr)
library(patchwork)
library(tidyverse)
library(parallel)
library(doParallel)
library(pROC)
sam <- data.frame(ps@sam_data)
create_a_diversity_plot <- function(ps, variable) {
# Create the plot
a_diversity_factor <- plot_richness(ps, x = variable, color = variable,
measures = c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
# Add statistical annotations
a_diversity_factor <- a_diversity_factor +
geom_boxplot() +
geom_jitter(alpha = 0.25) +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 18, face = "bold"),
legend.position = "none",
axis.text.x = element_text(size = 14)) +
labs(x = gsub("_", " ", variable)) +
# Add p-values for each metric
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1,    # Left side
label.y = Inf,  # Top
hjust = 0,      # Left-align text
vjust = 1.5,    # Pushes it down slightly from top edge
size = 10
)
print(a_diversity_factor)
return(a_diversity_factor)
}
View(sam)
View(sam)

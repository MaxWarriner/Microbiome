rownames_to_column(var = "OTU_name")
SVs_with_taxonomy <- SVs_with_taxonomy |>
left_join(taxonomy, by = "OTU_name")
# Aggregate the SVs data to the specified taxonomic level
tax_level_SVs <- SVs_with_taxonomy %>%
dplyr::select(-OTU_name) %>%
group_by(!!sym(tax_col))
tax_level_SVs <- tax_level_SVs |>
summarise(across(everything(), ~sum(.x, na.rm = TRUE)))
tax_level_SVs <- tax_level_SVs |>
filter(!!sym(tax_col) != "none") %>%
column_to_rownames(var = tax_col)
# Convert to matrix for ALDEx2 analysis
tax_level_SVs <- as.matrix(tax_level_SVs)
condition <- as.character(as.factor(metadata[[condition_col]])) |>
# Run ALDEx2 analysis
aldex_data <- aldex(tax_level_SVs, conditions = condition, mc.samples = 138, test = "t", effect = TRUE)
# Combine t-test and effect size results
results <- data.frame(aldex_data)
# Merge results with taxonomy
results <- results %>%
rownames_to_column(var = tax_col)
# Create the volcano plot (before multiple testing correction)
p <- results %>%
mutate(Significant = if_else(we.ep < 0.05, TRUE, FALSE)) %>%
mutate(Taxon = as.character(!!sym(tax_col))) %>%
mutate(TaxonToPrint = if_else(we.ep < 0.05, paste(Taxon, "(", round(we.ep,3) , ")", sep = ""), "")) |>
ggplot(aes(x = diff.btw, y = -log10(we.ep), color = Significant, label = TaxonToPrint)) +
geom_text_repel(size = 4, nudge_y = 0.05, max.overlaps = Inf) +  # Increase max.overlaps
geom_point(alpha = 0.6, shape = 16) +
theme_minimal() +
xlab("log2(fold change)") +
ylab("-log10(P-value)") +
theme(legend.position = "none") +
ggtitle(paste("Factor:", condition_col,"-- Taxonomic Level:", tax_col))
return(p)
}
library(ALDEx2)
create_volcano_plot <- function(ps_obj, taxlevel, condition_col, metadata, SVs, taxonomy) {
# Ensure that taxonomy contains the specified level
tax_col <- colnames(taxonomy)[taxlevel]
taxonomy <- taxonomy %>%
rownames_to_column(var = "OTU_name") %>%
dplyr::select(OTU_name, !!sym(tax_col)) %>%
distinct()
# Combine SVs with taxonomy to match the specified level
SVs_with_taxonomy <- as.data.frame(SVs) %>%
rownames_to_column(var = "OTU_name")
SVs_with_taxonomy <- SVs_with_taxonomy |>
left_join(taxonomy, by = "OTU_name")
# Aggregate the SVs data to the specified taxonomic level
tax_level_SVs <- SVs_with_taxonomy %>%
dplyr::select(-OTU_name) %>%
group_by(!!sym(tax_col))
tax_level_SVs <- tax_level_SVs |>
summarise(across(everything(), ~sum(.x, na.rm = TRUE)))
tax_level_SVs <- tax_level_SVs |>
filter(!!sym(tax_col) != "none") %>%
column_to_rownames(var = tax_col)
# Convert to matrix for ALDEx2 analysis
tax_level_SVs <- as.matrix(tax_level_SVs)
condition <- as.character(as.factor(metadata[[condition_col]])) |>
# Run ALDEx2 analysis
aldex_data <- aldex(tax_level_SVs, conditions = condition, mc.samples = 138, test = "t", effect = TRUE)
# Combine t-test and effect size results
results <- data.frame(aldex_data)
# Merge results with taxonomy
results <- results %>%
rownames_to_column(var = tax_col)
# Create the volcano plot (before multiple testing correction)
p <- results %>%
mutate(Significant = if_else(we.ep < 0.05, TRUE, FALSE)) %>%
mutate(Taxon = as.character(!!sym(tax_col))) %>%
mutate(TaxonToPrint = if_else(we.ep < 0.05, paste(Taxon, "(", round(we.ep,3) , ")", sep = ""), "")) |>
ggplot(aes(x = diff.btw, y = -log10(we.ep), color = Significant, label = TaxonToPrint)) +
geom_text_repel(size = 4, nudge_y = 0.05, max.overlaps = Inf) +  # Increase max.overlaps
geom_point(alpha = 0.6, shape = 16) +
theme_minimal() +
xlab("log2(fold change)") +
ylab("-log10(P-value)") +
theme(legend.position = "none") +
ggtitle(paste("Factor:", condition_col,"-- Taxonomic Level:", tax_col))
return(p)
}
create_volcano_plot <- function(ps_obj, taxlevel, condition_col, metadata, SVs, taxonomy) {
browser()
# Ensure that taxonomy contains the specified level
tax_col <- colnames(taxonomy)[taxlevel]
taxonomy <- taxonomy %>%
rownames_to_column(var = "OTU_name") %>%
dplyr::select(OTU_name, !!sym(tax_col)) %>%
distinct()
# Combine SVs with taxonomy to match the specified level
SVs_with_taxonomy <- as.data.frame(SVs) %>%
rownames_to_column(var = "OTU_name")
SVs_with_taxonomy <- SVs_with_taxonomy |>
left_join(taxonomy, by = "OTU_name")
# Aggregate the SVs data to the specified taxonomic level
tax_level_SVs <- SVs_with_taxonomy %>%
dplyr::select(-OTU_name) %>%
group_by(!!sym(tax_col))
tax_level_SVs <- tax_level_SVs |>
summarise(across(everything(), ~sum(.x, na.rm = TRUE)))
tax_level_SVs <- tax_level_SVs |>
filter(!!sym(tax_col) != "none") %>%
column_to_rownames(var = tax_col)
# Convert to matrix for ALDEx2 analysis
tax_level_SVs <- as.matrix(tax_level_SVs)
condition <- as.character(as.factor(metadata[[condition_col]])) |>
# Run ALDEx2 analysis
aldex_data <- aldex(tax_level_SVs, conditions = condition, mc.samples = 138, test = "t", effect = TRUE)
# Combine t-test and effect size results
results <- data.frame(aldex_data)
# Merge results with taxonomy
results <- results %>%
rownames_to_column(var = tax_col)
# Create the volcano plot (before multiple testing correction)
p <- results %>%
mutate(Significant = if_else(we.ep < 0.05, TRUE, FALSE)) %>%
mutate(Taxon = as.character(!!sym(tax_col))) %>%
mutate(TaxonToPrint = if_else(we.ep < 0.05, paste(Taxon, "(", round(we.ep,3) , ")", sep = ""), "")) |>
ggplot(aes(x = diff.btw, y = -log10(we.ep), color = Significant, label = TaxonToPrint)) +
geom_text_repel(size = 4, nudge_y = 0.05, max.overlaps = Inf) +  # Increase max.overlaps
geom_point(alpha = 0.6, shape = 16) +
theme_minimal() +
xlab("log2(fold change)") +
ylab("-log10(P-value)") +
theme(legend.position = "none") +
ggtitle(paste("Factor:", condition_col,"-- Taxonomic Level:", tax_col))
return(p)
}
create_volcano_plot <- function(ps_obj, taxlevel, condition_col, metadata, SVs, taxonomy) {
# Ensure that taxonomy contains the specified level
tax_col <- colnames(taxonomy)[taxlevel]
taxonomy <- taxonomy %>%
rownames_to_column(var = "OTU_name") %>%
dplyr::select(OTU_name, !!sym(tax_col)) %>%
distinct()
# Combine SVs with taxonomy to match the specified level
SVs_with_taxonomy <- as.data.frame(SVs) %>%
rownames_to_column(var = "OTU_name")
SVs_with_taxonomy <- SVs_with_taxonomy |>
left_join(taxonomy, by = "OTU_name")
# Aggregate the SVs data to the specified taxonomic level
tax_level_SVs <- SVs_with_taxonomy %>%
dplyr::select(-OTU_name) %>%
group_by(!!sym(tax_col))
tax_level_SVs <- tax_level_SVs |>
summarise(across(everything(), ~sum(.x, na.rm = TRUE)))
tax_level_SVs <- tax_level_SVs |>
filter(!!sym(tax_col) != "none") %>%
column_to_rownames(var = tax_col)
# Convert to matrix for ALDEx2 analysis
tax_level_SVs <- as.matrix(tax_level_SVs)
condition <- as.character(as.factor(metadata[[condition_col]]))
# Run ALDEx2 analysis
aldex_data <- aldex(tax_level_SVs, conditions = condition, mc.samples = 138, test = "t", effect = TRUE)
# Combine t-test and effect size results
results <- data.frame(aldex_data)
# Merge results with taxonomy
results <- results %>%
rownames_to_column(var = tax_col)
# Create the volcano plot (before multiple testing correction)
p <- results %>%
mutate(Significant = if_else(we.ep < 0.05, TRUE, FALSE)) %>%
mutate(Taxon = as.character(!!sym(tax_col))) %>%
mutate(TaxonToPrint = if_else(we.ep < 0.05, paste(Taxon, "(", round(we.ep,3) , ")", sep = ""), "")) |>
ggplot(aes(x = diff.btw, y = -log10(we.ep), color = Significant, label = TaxonToPrint)) +
geom_text_repel(size = 4, nudge_y = 0.05, max.overlaps = Inf) +  # Increase max.overlaps
geom_point(alpha = 0.6, shape = 16) +
theme_minimal() +
xlab("log2(fold change)") +
ylab("-log10(P-value)") +
theme(legend.position = "none") +
ggtitle(paste("Factor:", condition_col,"-- Taxonomic Level:", tax_col))
return(p)
}
create_combined_volcano <- function(ps, factor, metadata, SVs, taxonomy){
volcano_plot_phylum <- create_volcano_plot(ps, 2, factor, metadata, SVs, taxonomy)
volcano_plot_phylum <- create_volcano_plot(ps, 5, factor, metadata, SVs, taxonomy)
volcano_plot_phylum <- create_volcano_plot(ps, 6, factor, metadata, SVs, taxonomy)
combined_volcano_plot <- (volcano_plot_phylum | volcano_plot_family) / (volcano_plot_genus)
print(combined_volcano_plot)
ggsave(combined_volcano_plot,
filename = paste(factor, "_volcano.pdf", sep = ""),
device = "pdf",
height = 8, width = 12, units = "in")
}
create_combined_volcano("Age")
create_combined_volcano(ps, "Age", metadata, SVs, taxonomy)
create_combined_volcano(ps, "Sex", metadata, SVs, taxonomy)
create_combined_volcano <- function(ps, factor, metadata, SVs, taxonomy){
volcano_plot_phylum <- create_volcano_plot(ps, 2, factor, metadata, SVs, taxonomy)
volcano_plot_family <- create_volcano_plot(ps, 5, factor, metadata, SVs, taxonomy)
volcano_plot_genus <- create_volcano_plot(ps, 6, factor, metadata, SVs, taxonomy)
combined_volcano_plot <- (volcano_plot_phylum | volcano_plot_family) / (volcano_plot_genus)
print(combined_volcano_plot)
ggsave(combined_volcano_plot,
filename = paste(factor, "_volcano.pdf", sep = ""),
device = "pdf",
height = 8, width = 12, units = "in")
}
create_combined_volcano(ps, "Sex", metadata, SVs, taxonomy)
create_combined_volcano(ps, "Sex", metadata, SVs, taxonomy)
create_combined_volcano <- function(ps, factor, metadata, SVs, taxonomy){
volcano_plot_phylum <- create_volcano_plot(ps, 2, factor, metadata, SVs, taxonomy)
volcano_plot_family <- create_volcano_plot(ps, 5, factor, metadata, SVs, taxonomy)
volcano_plot_genus <- create_volcano_plot(ps, 6, factor, metadata, SVs, taxonomy)
combined_volcano_plot <- (volcano_plot_phylum | volcano_plot_family) / (volcano_plot_genus)
ggsave(combined_volcano_plot,
filename = paste(factor, "_volcano.pdf", sep = ""),
device = "pdf",
height = 8, width = 12, units = "in")
}
create_combined_volcano(ps, "Sex", metadata, SVs, taxonomy)
create_combined_volcano(ps, "Sex", metadata, SVs, taxonomy)
create_combined_volcano(ps, "Sex", metadata, SVs, taxonomy)
# Function to create volcano plots for taxonomic levels
create_volcano_plot <- function(ps_obj, taxlevel, condition_col, metadata, SVs, taxonomy) {
# Ensure that taxonomy contains the specified level
tax_col <- colnames(taxonomy)[taxlevel]
taxonomy <- taxonomy %>%
rownames_to_column(var = "OTU_name") %>%
dplyr::select(OTU_name, !!sym(tax_col)) %>%
distinct()
# Combine SVs with taxonomy to match the specified level
SVs_with_taxonomy <- as.data.frame(SVs) %>%
rownames_to_column(var = "OTU_name") %>%
left_join(taxonomy, by = "OTU_name")
# Aggregate the SVs data to the specified taxonomic level
tax_level_SVs <- SVs_with_taxonomy %>%
dplyr::select(-OTU_name) %>%
group_by(!!sym(tax_col)) %>%
summarise(across(everything(), ~sum(.x, na.rm = TRUE)))%>%
filter(!!sym(tax_col) != "none") %>%
column_to_rownames(var = tax_col)
# Convert to matrix for ALDEx2 analysis
tax_level_SVs <- as.matrix(tax_level_SVs)
condition <- as.character(as.factor(metadata[[condition_col]]))
# Run ALDEx2 analysis
aldex_data <- aldex(tax_level_SVs, conditions = condition, mc.samples = 128, test = "t", effect = TRUE)
# Combine t-test and effect size results
results <- data.frame(aldex_data)
# Merge results with taxonomy
results <- results %>%
rownames_to_column(var = tax_col)
# Create the volcano plot (after multiple testing correction)
p <- results %>%
mutate(Significant = if_else(wi.eBH < 0.1, TRUE, FALSE)) %>%
mutate(Taxon = as.character(!!sym(tax_col))) %>%
mutate(TaxonToPrint = if_else(wi.eBH < 0.05, paste(Taxon, "(", round(wi.eBH,3) , ")", sep = ""), "")) |>
ggplot(aes(x = diff.btw, y = -log10(we.ep), color = Significant, label = TaxonToPrint)) +
geom_text_repel(size = 2, nudge_y = 0.05, max.overlaps = Inf) +  # Increase max.overlaps
geom_point(alpha = 0.6, shape = 16) +
theme_minimal() +
xlab("log2(fold change)") +
ylab("-log10(P-value)") +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red")) +
ggtitle(paste("Taxonomic Level:", tax_col))
return(p)
}
ps <- readRDS("continuous_data.rds") # read in ps file
a_diversity <- estimate_richness(ps) # calculate alpha diversity of each sample
sample_data <- ps@sam_data #extract sample data
sample_data$sample <- rownames(sample_data) #create column with sample
a_diversity$sample <- rownames(sample_data) #create same column in diversity object to be able to merge by
sample_data <- data.frame(sample_data) #convert sample data to data frame for merging
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) |> #merge the data together
dplyr::select(-sample_data)
a_diversity <- a_diversity %>%       # remove any columns where there is an NA
dplyr::select(where(~!any(is.na(.))))
a_diversity <- a_diversity |> # remove sample column now that it's not needed
dplyr::select(-sample)
ps <- readRDS("continuous_data.rds") # read in ps file
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
a_diversity <- estimate_richness(ps) # calculate alpha diversity of each sample
sample_data <- ps@sam_data #extract sample data
sample_data$sample <- rownames(sample_data) #create column with sample
a_diversity$sample <- rownames(sample_data) #create same column in diversity object to be able to merge by
sample_data <- data.frame(sample_data) #convert sample data to data frame for merging
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) |> #merge the data together
dplyr::select(-sample_data)
a_diversity <- a_diversity %>%       # remove any columns where there is an NA
dplyr::select(where(~!any(is.na(.))))
a_diversity <- a_diversity |> # remove sample column now that it's not needed
dplyr::select(-sample)
a_diversity <- mutate_if(a_diversity, is.character, as.factor) #change all character columns to factor
a_diversity <- a_diversity %>%
dplyr::select_if(~ !(is.factor(.) & nlevels(.) == 1)) # remove all columns where factor only has one level
a_diversity <- a_diversity %>%
dplyr::select_if(~ length(unique(.)) > 1) # remove all columns where numeric has only one level
Shannon =lm(Shannon ~ . , data=a_diversity) # generate linear models of data with all the variables
Chao1 =lm(Chao1 ~ . , data=a_diversity)
removeAliased <- function(mod) { # removes variables with colinearity
## Retrieve all terms in the model
X <- attr(mod$terms, "term.label")
## Get the aliased coefficients
rn <- rownames(alias(mod)$Complete)
## remove factor levels from coefficient names to retrieve the terms
regex.base <- unique(unlist(lapply(mod$model[, sapply(mod$model, is.factor)], levels)))
aliased <- gsub(paste(regex.base, "$", sep = "", collapse = "|"),  "", gsub(paste(regex.base, ":", sep = "", collapse = "|"), ":", rn))
uF <- formula(paste(". ~ .", paste(aliased, collapse = "-"), sep = "-"))
update(mod, uF)
}
Shannon <- removeAliased(Shannon) # remove colinear variables from data
Chao1 <- removeAliased(Chao1)
#Perform Multivariable Linear Regression
summary(Shannon)
summary(Chao1)
#perform stepwise regression
library(MASS)
Shannon = stepAIC(Shannon, direction = "both", trace = FALSE) # Stepwise regression model with shannon measure
Shannon_summary <- summary(Shannon)
shannon_coeffs <- data.frame(Shannon_summary$coefficients)
Chao1 = stepAIC(Chao1, direction = "both", trace = FALSE) #stepwise regression model with chao1 measure
Chao1_summary <- summary(Chao1)
Chao1_coeffs <- data.frame(Chao1_summary$coefficients)
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1)) #function that rounds all the numbers in the dataframe
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
shannon_coeffs <- round_df(shannon_coeffs, 4) #round each data frame to four decimal places
Chao1_coeffs <- round_df(Chao1_coeffs, 4)
View(shannon_coeffs)
ps <- readRDS("categorized_data.RDS")
ps
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
#Changing the taxonomic table labels (From Rank 1~Rank 7 to Kingdom~Species)
# Access the existing taxonomy table from the phyloseq object
tax_table_ps <- tax_table(ps)[,1:7]
# Assign the modified taxonomy table back to the phyloseq object
tax_table(ps) <- tax_table_ps
library(ggrepel)
library(patchwork)
library(RColorBrewer)
create_a_diversity_plot <- function(ps, factor){
a_diversity_factor<- plot_richness(ps, x=factor, color=factor, measures=c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
a_diversity_factor <- a_diversity_factor  + geom_boxplot() + theme_bw()
print(a_diversity_factor)
ggsave(a_diversity_factor,
filename = paste(factor,"_boxplot.pdf", sep = ""),
device = "pdf",
height = 6, width = 5, units = "in")
}
create_a_diversity_plot(ps, "Household.Number")
create_a_diversity_plot(ps, "Siblings.Younger.than.12")
create_a_diversity_plot(ps, "HeardALnamebefore")
create_a_diversity_plot(ps, "HeardTTnamebefore")
create_a_diversity_plot(ps, "HeardHWnamebefore")
create_a_diversity_plot(ps, "HeardInWormnamebefore")
create_a_diversity_plot(ps, "HeardMalanamebefore")
create_a_diversity_plot(ps, "HeardTBnamebefore")
create_a_diversity_plot(ps, "HeardSChnamebefore")
create_a_diversity_plot(ps, "HPtold")
create_a_diversity_plot(ps, "Teachertold")
ps@sam_data
sam_data <- sam_data(ps)
convert_binary_to_yesno <- function(df, skip_non_numeric = TRUE) {
for (col_name in names(df)) {
col_data <- df[[col_name]]
# Skip if not numeric (when skip_non_numeric = TRUE)
if (skip_non_numeric && !is.numeric(col_data)) next
# Get unique non-NA values
unique_vals <- unique(na.omit(col_data))
# Check if binary (0/1)
if (all(unique_vals %in% c(0, 1)) && length(unique_vals) <= 2) {
df[[col_name]] <- factor(col_data,
levels = c(0, 1),
labels = c("no", "yes"))
}
}
return(df)
}
sam_data <- convert_binary_to_yesno(sam_data)
View(sam_data)
sam_data(ps) <- sam_data
create_a_diversity_plot <- function(ps, factor){
a_diversity_factor<- plot_richness(ps, x=factor, color=factor, measures=c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
a_diversity_factor <- a_diversity_factor  + geom_boxplot() + theme_bw()
print(a_diversity_factor)
ggsave(a_diversity_factor,
filename = paste(factor,"_boxplot.pdf", sep = ""),
device = "pdf",
height = 6, width = 5, units = "in")
}
create_a_diversity_plot(ps, "Household.Number")
create_a_diversity_plot(ps, "Siblings.Younger.than.12")
create_a_diversity_plot(ps, "HeardALnamebefore")
create_a_diversity_plot(ps, "HeardTTnamebefore")
create_a_diversity_plot(ps, "HeardHWnamebefore")
create_a_diversity_plot(ps, "HeardInWormnamebefore")
create_a_diversity_plot(ps, "HeardMalanamebefore")
create_a_diversity_plot(ps, "HeardTBnamebefore")
create_a_diversity_plot(ps, "HeardSChnamebefore")
create_a_diversity_plot(ps, "HPtold")
create_a_diversity_plot(ps, "Teachertold")
create_a_diversity_plot(ps, "Mediatold")
create_a_diversity_plot(ps, "Doyouknowhowintestinalwomstransmitted")
create_a_diversity_plot(ps, "Yourlivingaddress")
create_a_diversity_plot(ps, "Familyoccupation")
create_a_diversity_plot(ps, "Maternaleducationalstatus")
# Define the function to create PCoA plots
create_pcoa_plot <- function(variable) {
# Perform PCoA
pcoares <- get_pcoa(obj = ps, distmethod = "bray", method = "hellinger")
# Create PCoA plot
pcoaplot <- ggordpoint(obj = pcoares, biplot = FALSE, speciesannot = TRUE,
factorNames = c(variable), ellipse = TRUE, linesize = 1.5)
print(pcoaplot)
ggsave(pcoaplot,
filename = paste(variable, "_pcoa_bray.pdf", sep = ""),
device = "pdf",
height = 6, width = 8, units = "in")
return(pcoaplot)
}
# Create plots for each variable
create_pcoa_plot("Household.Number")
library(MicrobiotaProcess)
# Define the function to create PCoA plots
create_pcoa_plot <- function(variable) {
# Perform PCoA
pcoares <- get_pcoa(obj = ps, distmethod = "bray", method = "hellinger")
# Create PCoA plot
pcoaplot <- ggordpoint(obj = pcoares, biplot = FALSE, speciesannot = TRUE,
factorNames = c(variable), ellipse = TRUE, linesize = 1.5)
print(pcoaplot)
ggsave(pcoaplot,
filename = paste(variable, "_pcoa_bray.pdf", sep = ""),
device = "pdf",
height = 6, width = 8, units = "in")
return(pcoaplot)
}
# Create plots for each variable
create_pcoa_plot("Household.Number")
create_pcoa_plot("Siblings.Younger.than.12")
create_pcoa_plot("HeardALnamebefore")
create_pcoa_plot("HeardTTnamebefore")
create_pcoa_plot("HeardHWnamebefore")
create_pcoa_plot("HeardInWormnamebefore")
create_pcoa_plot("HeardMalanamebefore")
create_pcoa_plot("HeardTBnamebefore")
create_pcoa_plot("HeardSChnamebefore")
create_pcoa_plot("HPtold")
create_pcoa_plot("Teachertold")
create_pcoa_plot("Mediatold")
create_pcoa_plot("Doyouknowhowintestinalwomstransmitted")
create_pcoa_plot("Yourlivingaddress")
create_pcoa_plot("Familyoccupation")
create_pcoa_plot("Maternaleducationalstatus")
library(vegan)
factors <- c("Household.Number", "Siblings.Younger.than.12", "HeardALnamebefore", "HeardTTnamebefore", "HeardHWnamebefore", "HeardInWormnamebefore", "HeardMalanamebefore", "HeardTBnamebefore", "HeardSChnamebefore", "HPtold", "Teachertold", "Mediatold", "Doyouknowhowintestinalwomstransmitted", "Yourlivingaddress", "Familyoccupation", "Maternaleducationalstatus")
distme <- get_dist(ps, distmethod ="bray")
sampleda <- data.frame(sample_data(ps), check.names=FALSE)
sampleda <- sampleda[match(colnames(as.matrix(distme)),rownames(sampleda)),,drop=FALSE]
set.seed(1024)
adores <- adonis2(distme ~ Household.Number, data=sampleda, permutations=999) #p-value =
summary <- summary(adores)
summary <- as.data.frame(summary(adores))
View(summary)
adonis2(distme ~ Household.Number, data=sampleda, permutations=999)
View(adores)
adores_summary <- data.frame(factor = factors,
p-value = rep(NA, length(factors)))
adores_summary <- data.frame(factor = factors,
p = rep(NA, length(factors)))
View(adores_summary)
run_adores <- function(factors){
for (i in 1:length(factors)){
adores_summary[i,"p"] <- adonis2(distme ~ factors[i], data = sampleda, permutations = 999)
}
}
run_adores(factors)
run_adores <- function(factors){
i = 1
for (i in 1:length(factors)){
adores_summary[i,"p"] <- adonis2(distme ~ factors[i], data = sampleda, permutations = 999)
}
}
run_adores(factors)
run_adores <- function(factors){
for (i in 1:length(factors)){
adores_summary[i,"p"] <- adonis2(distme ~ factors[i], data = sampleda, permutations = 999)
}
}
run_adores(factors)
for (x in 1:10) {
print(x)
}
run_adores <- function(factors){
for (x in 1:length(factors)){
adores_summary[x,"p"] <- adonis2(distme ~ factors[x], data = sampleda, permutations = 999)
}
}
run_adores(factors)
adores_delivery <- adonis2(distme ~ Modeofdelivery, data=sampleda, permutations=999) #p-value =
adores_delivery
adores_weight <- adonis2(distme ~ weight, data=sampleda, permutations=999) #p-value =
adores_weight
adores_vaccine <- adonis2(distme ~ Everhadvaccinated, data=sampleda, permutations=999) #p-value =
adores_vaccine
run_adores(factors)
browser()
run_adores(factors)
levels(factors)

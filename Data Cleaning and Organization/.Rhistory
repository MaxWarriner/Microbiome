library(dplyr)
library(ggrepel)
library(patchwork)
library(RColorBrewer)
library(rlang)
library(MicrobiotaProcess)
library(vegan)
library(dplyr)
library(ALDEx2)
library(microbiomeMarker)
library(ggsci)
library(ggpubr)
library(patchwork)
library(tidyverse)
ps <- readRDS("categorized_data.RDS") # Load in using whatever file name you have
setwd("~/Microbiome/Data Analysis")
ps <- readRDS("categorized_data.RDS") # Load in using whatever file name you have
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
#Changing the taxonomic table labels (From Rank 1~Rank 7 to Kingdom~Species)
# Access the existing taxonomy table from the phyloseq object
tax_table_ps <- tax_table(ps)[,1:7]
# Assign the modified taxonomy table back to the phyloseq object
tax_table(ps) <- tax_table_ps
#define list of factors to be tested
factors <- colnames(ps@sam_data)
create_a_diversity_plot <- function(ps, variable) {
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 5 times
valid_values <- names(value_counts)[value_counts >= 5]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
# Get alpha diversity metrics
alpha_div <- estimate_richness(ps_final, measures = c("Chao1", "Shannon"))
alpha_div$sample_id <- rownames(alpha_div)
alpha_div <- merge(alpha_div, sam_data_filtered, by.x = "sample_id", by.y = "row.names")
# Create the plot
a_diversity_factor <- plot_richness(ps_final, x = variable, color = variable,
measures = c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
# Add statistical annotations
a_diversity_factor <- a_diversity_factor +
geom_boxplot() +
geom_jitter(alpha = 0.25) +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 18, face = "bold"),
legend.position = "none",
axis.text.x = element_text(size = 14)) +
labs(x = gsub("_", " ", variable)) +
# Add p-values for each metric
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1,    # Left side
label.y = Inf,  # Top
hjust = 0,      # Left-align text
vjust = 1.5,    # Pushes it down slightly from top edge
size = 10
) +
scale_x_discrete()
print(a_diversity_factor)
return(a_diversity_factor)
}
?scale_x_discrete
create_a_diversity_plot <- function(ps, variable) {
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 5 times
valid_values <- names(value_counts)[value_counts >= 5]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
# Get alpha diversity metrics
alpha_div <- estimate_richness(ps_final, measures = c("Chao1", "Shannon"))
alpha_div$sample_id <- rownames(alpha_div)
alpha_div <- merge(alpha_div, sam_data_filtered, by.x = "sample_id", by.y = "row.names")
# Create the plot
a_diversity_factor <- plot_richness(ps_final, x = variable, color = variable,
measures = c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
# Add statistical annotations
a_diversity_factor <- a_diversity_factor +
geom_boxplot() +
geom_jitter(alpha = 0.25) +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 18, face = "bold"),
legend.position = "none",
axis.text.x = element_text(size = 14)) +
labs(x = gsub("_", " ", variable)) +
# Add p-values for each metric
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1,    # Left side
label.y = Inf,  # Top
hjust = 0,      # Left-align text
vjust = 1.5,    # Pushes it down slightly from top edge
size = 10
) +
scale_x_discrete(limits = "never", "sometimes", "always")
print(a_diversity_factor)
return(a_diversity_factor)
}
a_diversity_use_school_latrine <- create_a_diversity_plot(ps, "Frequency_of_Using_School_Latrine")
create_a_diversity_plot <- function(ps, variable) {
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 5 times
valid_values <- names(value_counts)[value_counts >= 5]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
# Get alpha diversity metrics
alpha_div <- estimate_richness(ps_final, measures = c("Chao1", "Shannon"))
alpha_div$sample_id <- rownames(alpha_div)
alpha_div <- merge(alpha_div, sam_data_filtered, by.x = "sample_id", by.y = "row.names")
# Create the plot
a_diversity_factor <- plot_richness(ps_final, x = variable, color = variable,
measures = c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
# Add statistical annotations
a_diversity_factor <- a_diversity_factor +
geom_boxplot() +
geom_jitter(alpha = 0.25) +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 18, face = "bold"),
legend.position = "none",
axis.text.x = element_text(size = 14)) +
labs(x = gsub("_", " ", variable)) +
# Add p-values for each metric
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1,    # Left side
label.y = Inf,  # Top
hjust = 0,      # Left-align text
vjust = 1.5,    # Pushes it down slightly from top edge
size = 10
) +
scale_x_discrete(limits = c("never", "sometimes", "always"))
print(a_diversity_factor)
return(a_diversity_factor)
}
a_diversity_use_school_latrine <- create_a_diversity_plot(ps, "Frequency_of_Using_School_Latrine")
# Define the function to create PCoA plots
create_pcoa_plot <- function(variable) {
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 3 times (PCOA plot can't draw ellipse with < 3 points)
valid_values <- names(value_counts)[value_counts >= 3]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
# Get final sample data
sam_data_final <- as(sample_data(ps_final), "data.frame")
# Perform PCoA
pcoares <- get_pcoa(obj = ps_final, distmethod = "bray", method = "hellinger")
# Perform PERMANOVA to get p-value
physeq_dist <- phyloseq::distance(ps_final, method = "bray")
permanova <- vegan::adonis2(physeq_dist ~ sam_data_final[[variable]])
p_value <- permanova$`Pr(>F)`[1]
# Format p-value for display
p_text <- ifelse(p_value < 0.001, "p < 0.001",
paste("p =", format(round(p_value, 3), nsmall = 3)))
# Create PCoA plot
pcoaplot <- ggordpoint(obj = pcoares, biplot = FALSE, speciesannot = TRUE,
factorNames = c(variable), ellipse = TRUE, linesize = 1.5,
ellipse_linewd = 1, ellipse_lty = 2) +
ggtitle(gsub("_", " ", variable)) +
guides(color=guide_legend(title=gsub("_", " ", variable),
override.aes = list(size = 4))) +
theme(title = element_text(size=4,face="bold"),
legend.title = element_blank(),
legend.text = element_text(size = 32)) +
# Add p-value annotation
annotate("text", x = Inf, y = Inf,
label = p_text,
hjust = 1.1, vjust = 1.5,
size = 14, fontface = "bold")
print(pcoaplot)
# ggsave(pcoaplot,
#        filename = paste(variable, "_pcoa_bray.pdf", sep = ""),
#        device = "pdf",
#        height = 6, width = 8, units = "in")
return(pcoaplot)
}
# Household Factors
beta_diversity_kitchen_material <- create_pcoa_plot("Kitchen_Material")
# Define the function to create PCoA plots
create_pcoa_plot <- function(variable) {
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 3 times (PCOA plot can't draw ellipse with < 3 points)
valid_values <- names(value_counts)[value_counts >= 3]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
# Get final sample data
sam_data_final <- as(sample_data(ps_final), "data.frame")
# Perform PCoA
pcoares <- get_pcoa(obj = ps_final, distmethod = "bray", method = "hellinger")
# Perform PERMANOVA to get p-value
physeq_dist <- phyloseq::distance(ps_final, method = "bray")
permanova <- vegan::adonis2(physeq_dist ~ sam_data_final[[variable]])
p_value <- permanova$`Pr(>F)`[1]
# Format p-value for display
p_text <- ifelse(p_value < 0.001, "p < 0.001",
paste("p =", format(round(p_value, 3), nsmall = 3)))
# Create PCoA plot
pcoaplot <- ggordpoint(obj = pcoares, biplot = FALSE, speciesannot = TRUE,
factorNames = c(variable), ellipse = TRUE, linesize = 1.5,
ellipse_linewd = 1, ellipse_lty = 2) +
ggtitle(gsub("_", " ", variable)) +
guides(color=guide_legend(title=gsub("_", " ", variable),
override.aes = list(size = 4))) +
theme(
legend.title = element_text(size = 32),
legend.text = element_text(size = 32)) +
# Add p-value annotation
annotate("text", x = Inf, y = Inf,
label = p_text,
hjust = 1.1, vjust = 1.5,
size = 14, fontface = "bold")
print(pcoaplot)
# ggsave(pcoaplot,
#        filename = paste(variable, "_pcoa_bray.pdf", sep = ""),
#        device = "pdf",
#        height = 6, width = 8, units = "in")
return(pcoaplot)
}
# Household Factors
beta_diversity_kitchen_material <- create_pcoa_plot("Kitchen_Material")
# Define the function to create PCoA plots
create_pcoa_plot <- function(variable) {
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 3 times (PCOA plot can't draw ellipse with < 3 points)
valid_values <- names(value_counts)[value_counts >= 3]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
# Get final sample data
sam_data_final <- as(sample_data(ps_final), "data.frame")
# Perform PCoA
pcoares <- get_pcoa(obj = ps_final, distmethod = "bray", method = "hellinger")
# Perform PERMANOVA to get p-value
physeq_dist <- phyloseq::distance(ps_final, method = "bray")
permanova <- vegan::adonis2(physeq_dist ~ sam_data_final[[variable]])
p_value <- permanova$`Pr(>F)`[1]
# Format p-value for display
p_text <- ifelse(p_value < 0.001, "p < 0.001",
paste("p =", format(round(p_value, 3), nsmall = 3)))
# Create PCoA plot
pcoaplot <- ggordpoint(obj = pcoares, biplot = FALSE, speciesannot = TRUE,
factorNames = c(variable), ellipse = TRUE, linesize = 1.5,
ellipse_linewd = 1, ellipse_lty = 2) +
ggtitle(gsub("_", " ", variable)) +
guides(color=guide_legend(title=gsub("_", " ", variable),
override.aes = list(size = 4))) +
theme(
legend.title = element_text(size = 24),
legend.text = element_text(size = 20)) +
# Add p-value annotation
annotate("text", x = Inf, y = Inf,
label = p_text,
hjust = 1.1, vjust = 1.5,
size = 14, fontface = "bold") +
labs(color = paste("Kitchen Floor Material"))
print(pcoaplot)
# ggsave(pcoaplot,
#        filename = paste(variable, "_pcoa_bray.pdf", sep = ""),
#        device = "pdf",
#        height = 6, width = 8, units = "in")
return(pcoaplot)
}
# Household Factors
beta_diversity_kitchen_material <- create_pcoa_plot("Kitchen_Material")
# Define the function to create PCoA plots
create_pcoa_plot <- function(variable) {
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 3 times (PCOA plot can't draw ellipse with < 3 points)
valid_values <- names(value_counts)[value_counts >= 3]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
# Get final sample data
sam_data_final <- as(sample_data(ps_final), "data.frame")
# Perform PCoA
pcoares <- get_pcoa(obj = ps_final, distmethod = "bray", method = "hellinger")
# Perform PERMANOVA to get p-value
physeq_dist <- phyloseq::distance(ps_final, method = "bray")
permanova <- vegan::adonis2(physeq_dist ~ sam_data_final[[variable]])
p_value <- permanova$`Pr(>F)`[1]
# Format p-value for display
p_text <- ifelse(p_value < 0.001, "p < 0.001",
paste("p =", format(round(p_value, 3), nsmall = 3)))
# Create PCoA plot
pcoaplot <- ggordpoint(obj = pcoares, biplot = FALSE, speciesannot = TRUE,
factorNames = c(variable), ellipse = TRUE, linesize = 1.5,
ellipse_linewd = 1, ellipse_lty = 2) +
ggtitle(gsub("_", " ", variable)) +
guides(color=guide_legend(title=gsub("_", " ", variable),
override.aes = list(size = 4))) +
theme(
legend.title = element_blank(),
legend.text = element_text(size = 20)) +
# Add p-value annotation
annotate("text", x = Inf, y = Inf,
label = p_text,
hjust = 1.1, vjust = 1.5,
size = 12, fontface = "bold") +
labs(color = paste("Kitchen Floor Material"))
print(pcoaplot)
# ggsave(pcoaplot,
#        filename = paste(variable, "_pcoa_bray.pdf", sep = ""),
#        device = "pdf",
#        height = 6, width = 8, units = "in")
return(pcoaplot)
}
# Household Factors
beta_diversity_kitchen_material <- create_pcoa_plot("Kitchen_Material")
library(phyloseq)
library(dplyr)
ps <- readRDS("categorized_data.RDS")
ps <- readRDS("categorized_data.RDS")
sam <- sample_data(ps)
sam <- data.frame(sam)
sam <- sam |>
dplyr::select(-FinalFamOcc, -OpenFieldDefFinal, -SoilConsumpFinal, -SoilConsumpThinning, -AgeGroupUnderweight, -MatEdThinning, -OpenFieldDefThinning,-WashFruitsThinned, -Foods, -SevStunting, -SevThinning, -logWeight, -logHeight, -logHAZ, -logWAZ, -logBAZ, -Log1Weight, -Log1Height, -Log1WAZ, -Log1HAZ, -Log1BAZ, -lnWeight, -lnHeight, -lnWAZ, -lnBAZ, -sqrtWeight, -sqrtHeight, -sqrtWAZ, -sqrtWAZ, -sqrtHAZ, -sqrtBAZ, -OversqrtWeight, -OversqrtHeight, -OversqrtWAZ, -OversqrtHAZ, -OversqrtBAZ, -sample_data, -lnHAZ)
sam <- sam |>
mutate(SEI_proxy = ifelse((Maternal_Education_Status == "Illiterate" | Maternal_Education_Status == "Primary School") & House_Floor_Material == "Dust" & Kitchen_Separated.In_House == "Separated" & Frequency_of_Bathing_in_River != "never" & Frequency_of_Clothes_Washing_in_River != "never" & Underweight == "Underweight", "Lower","Upper"),
Cleanliness_proxy = ifelse(How_often_do_you_trim_your_fingernails. != "Once per Week" & Use_of_Toilet_Paper_after_Defecation != "always" & Frequency_of_Hand_Washing_After_Using_Toilet != "always" & Frequency_of_Using_Soap_After_Using_Toilet != "always" & Frequency_of_Using_Soap_Before_Eating != "always" & Freqency_of_Washing_Raw.Undercooked_Vegetables != "always" , "Unclean", "Clean"))
View(sam)
table(sam$SEI_proxy)
table(sam$Cleanliness_proxy)
table(sam$House_Floor_Material)
table(sam$Maternal_Education_Status)
table(sam$Kitchen_Separated.In_House)
table(sam$Frequency_of_Bathing_in_River)
table(sam$Frequency_of_Clothes_Washing_in_River)
table(sam$Underweight)
table(sam$How_often_do_you_trim_your_fingernails.)
table(sam$Use_of_Toilet_Paper_after_Defecation)
table(sam$Frequency_of_Hand_Washing_After_Using_Toilet)
table(sam$Frequency_of_Using_Soap_After_Using_Toilet)
table(sam$Frequency_of_Using_Soap_Before_Eating)
table(sam$Frequency_of_Washing_Raw.Undercooked_Vegetables)
table(sam$Frequency_of_Washing_Fruit_Before_Eating)
sam <- sam |>
mutate(SEI_proxy = ifelse((Maternal_Education_Status == "Illiterate" | Maternal_Education_Status == "Primary School") & House_Floor_Material == "Dust" & Kitchen_Separated.In_House == "Separated" & Frequency_of_Clothes_Washing_in_River != "never" & Underweight == "Underweight", "Lower","Upper"),
Cleanliness_proxy = ifelse(How_often_do_you_trim_your_fingernails. != "Once per Week" & Use_of_Toilet_Paper_after_Defecation != "always" & Frequency_of_Using_Soap_After_Using_Toilet != "always" & Frequency_of_Using_Soap_Before_Eating != "always" & Frequency_of_Washing_Fruit_Before_Eating != "always" , "Unclean", "Clean"))
table(sam$SEI_proxy, sam$Cleanliness_proxy)
sam <- sam |>
mutate(SEI_proxy = ifelse((Maternal_Education_Status == "Illiterate" | Maternal_Education_Status == "Primary School") & House_Floor_Material == "Dust" & Kitchen_Separated.In_House == "Separated" & Underweight == "Underweight", "Lower","Upper"),
Cleanliness_proxy = ifelse(How_often_do_you_trim_your_fingernails. != "Once per Week" & Use_of_Toilet_Paper_after_Defecation != "always" & Frequency_of_Using_Soap_After_Using_Toilet != "always" & Frequency_of_Using_Soap_Before_Eating != "always" & Frequency_of_Washing_Fruit_Before_Eating != "always" , "Unclean", "Clean"))
table(sam$SEI_proxy, sam$Cleanliness_proxy)
sam <- sam |>
mutate(SEI_proxy = ifelse((Maternal_Education_Status == "Illiterate" | Maternal_Education_Status == "Primary School") & House_Floor_Material != "Cement" & Kitchen_Separated.In_House == "Separated" & Underweight == "Underweight", "Lower","Upper"),
Cleanliness_proxy = ifelse(How_often_do_you_trim_your_fingernails. != "Once per Week" & Use_of_Toilet_Paper_after_Defecation != "always" & Frequency_of_Using_Soap_After_Using_Toilet != "always" & Frequency_of_Using_Soap_Before_Eating != "always" & Frequency_of_Washing_Fruit_Before_Eating != "always" , "Unclean", "Clean"))
table(sam$SEI_proxy, sam$Cleanliness_proxy)
sample_data(ps) <- sam
write.csv(sam,"sample_data.csv")
write_rds(ps, "categorized_data.RDS")
setwd("~/Microbiome/Data Cleaning and Organization")
write_rds(ps, "categorized_data.RDS")
setwd("~/Microbiome/Data Analysis")
library(BiocManager)
library(phyloseq)
library(tidyverse)
library(dplyr)
library(ggrepel)
library(patchwork)
library(RColorBrewer)
library(rlang)
library(MicrobiotaProcess)
library(vegan)
library(dplyr)
library(ALDEx2)
library(microbiomeMarker)
library(ggsci)
library(ggpubr)
library(patchwork)
library(tidyverse)
ps <- readRDS("categorized_data.RDS") # Load in using whatever file name you have
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
#Changing the taxonomic table labels (From Rank 1~Rank 7 to Kingdom~Species)
# Access the existing taxonomy table from the phyloseq object
tax_table_ps <- tax_table(ps)[,1:7]
# Assign the modified taxonomy table back to the phyloseq object
tax_table(ps) <- tax_table_ps
#define list of factors to be tested
factors <- colnames(ps@sam_data)
create_a_diversity_plot <- function(ps, variable) {
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 5 times
valid_values <- names(value_counts)[value_counts >= 5]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
# Get alpha diversity metrics
alpha_div <- estimate_richness(ps_final, measures = c("Chao1", "Shannon"))
alpha_div$sample_id <- rownames(alpha_div)
alpha_div <- merge(alpha_div, sam_data_filtered, by.x = "sample_id", by.y = "row.names")
# Create the plot
a_diversity_factor <- plot_richness(ps_final, x = variable, color = variable,
measures = c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
# Add statistical annotations
a_diversity_factor <- a_diversity_factor +
geom_boxplot() +
geom_jitter(alpha = 0.25) +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 18, face = "bold"),
legend.position = "none",
axis.text.x = element_text(size = 14)) +
labs(x = gsub("_", " ", variable)) +
# Add p-values for each metric
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1,    # Left side
label.y = Inf,  # Top
hjust = 0,      # Left-align text
vjust = 1.5,    # Pushes it down slightly from top edge
size = 10
)
print(a_diversity_factor)
return(a_diversity_factor)
}
sam <- ps@sam_data
View(sam)
setwd("~/Microbiome/Data Cleaning and Organization")
ps <- readRDS("categorized_data.RDS")
sam <- sample_data(ps)
sam <- data.frame(sam)
sam <- sam |>
dplyr::select(-FinalFamOcc, -OpenFieldDefFinal, -SoilConsumpFinal, -SoilConsumpThinning, -AgeGroupUnderweight, -MatEdThinning, -OpenFieldDefThinning,-WashFruitsThinned, -Foods, -SevStunting, -SevThinning, -logWeight, -logHeight, -logHAZ, -logWAZ, -logBAZ, -Log1Weight, -Log1Height, -Log1WAZ, -Log1HAZ, -Log1BAZ, -lnWeight, -lnHeight, -lnWAZ, -lnBAZ, -sqrtWeight, -sqrtHeight, -sqrtWAZ, -sqrtWAZ, -sqrtHAZ, -sqrtBAZ, -OversqrtWeight, -OversqrtHeight, -OversqrtWAZ, -OversqrtHAZ, -OversqrtBAZ, -sample_data, -lnHAZ)
View(sam)
sam <- sam |>
mutate(SEI_proxy = ifelse((Maternal_Education_Status == "Illiterate" | Maternal_Education_Status == "Primary School") & House_Floor_Material != "Cement" & Kitchen_Separated.In_House == "Separated" & Underweight == "Underweight", "Lower","Upper"),
Cleanliness_proxy = ifelse(How_often_do_you_trim_your_fingernails. != "Once per Week" & Use_of_Toilet_Paper_after_Defecation != "always" & Frequency_of_Using_Soap_After_Using_Toilet != "always" & Frequency_of_Using_Soap_Before_Eating != "always" & Freqency_of_Washing_Raw.Undercooked_Vegetables != "always" , "Unclean", "Clean"))
table(sam$SEI_proxy, sam$Cleanliness_proxy)
View(sam)
table(sam$Cleanliness_proxy)
table(sam$SEI_proxy)

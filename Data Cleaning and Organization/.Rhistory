#        filename = paste(variable,"_boxplot.pdf", sep = ""),
#        device = "pdf",
#        height = 6, width = 12, units = "in")
return(a_diversity_factor)
}
create_a_diversity_plot <- function(ps,variable){ #function to create an alpha diversity boxplot
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 5 times
valid_values <- names(value_counts)[value_counts >= 5]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
#create the plot
a_diversity_factor<- plot_richness(ps_final, x=variable, color=variable, measures=c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
a_diversity_factor <- a_diversity_factor  + geom_boxplot() + geom_jitter(alpha = 0.25) + theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=18,face="bold")) +
labs(x = gsub("_", " ", variable))
print(a_diversity_factor) #sneak-peek
#save the file as a pdf with big dimensions
# ggsave(a_diversity_factor,
#        filename = paste(variable,"_boxplot.pdf", sep = ""),
#        device = "pdf",
#        height = 6, width = 12, units = "in")
return(a_diversity_factor)
}
a_diversity_delivery <- create_a_diversity_plot(ps, "Mode_of_Delivery")
create_a_diversity_plot <- function(ps,variable){ #function to create an alpha diversity boxplot
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 5 times
valid_values <- names(value_counts)[value_counts >= 5]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
#create the plot
a_diversity_factor<- plot_richness(ps_final, x=variable, color=variable, measures=c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
a_diversity_factor <- a_diversity_factor  + geom_boxplot() + geom_jitter(alpha = 0.25) + theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=18,face="bold")) +
labs(x = gsub("_", " ", variable)) + guides(fill=guide_legend(title=gsub("_", " ", variable)))
print(a_diversity_factor) #sneak-peek
#save the file as a pdf with big dimensions
# ggsave(a_diversity_factor,
#        filename = paste(variable,"_boxplot.pdf", sep = ""),
#        device = "pdf",
#        height = 6, width = 12, units = "in")
return(a_diversity_factor)
}
a_diversity_delivery <- create_a_diversity_plot(ps, "Mode_of_Delivery")
create_a_diversity_plot <- function(ps,variable){ #function to create an alpha diversity boxplot
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 5 times
valid_values <- names(value_counts)[value_counts >= 5]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
#create the plot
a_diversity_factor<- plot_richness(ps_final, x=variable, color=variable, measures=c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
a_diversity_factor <- a_diversity_factor  + geom_boxplot() + geom_jitter(alpha = 0.25) + theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=18,face="bold")) +
labs(x = gsub("_", " ", variable)) + guides(color=guide_legend(title=gsub("_", " ", variable)))
print(a_diversity_factor) #sneak-peek
#save the file as a pdf with big dimensions
# ggsave(a_diversity_factor,
#        filename = paste(variable,"_boxplot.pdf", sep = ""),
#        device = "pdf",
#        height = 6, width = 12, units = "in")
return(a_diversity_factor)
}
a_diversity_delivery <- create_a_diversity_plot(ps, "Mode_of_Delivery")
# Demographic Factors
a_diversity_age <- create_a_diversity_plot(ps, "Age")
a_diversity_sex <- create_a_diversity_plot(ps, "Sex")
a_diversity_weight <- create_a_diversity_plot(ps, "Weight")
a_diversity_height <- create_a_diversity_plot(ps, "Height")
a_diversity_delivery <- create_a_diversity_plot(ps, "Mode_of_Delivery")
a_diversity_vaccine <- create_a_diversity_plot(ps, "Vaccinated")
a_diversity_bcg <- create_a_diversity_plot(ps, "BCG_Scar")
combined_demographic <- (a_diversity_age + a_diversity_sex) / (a_diversity_weight + a_diversity_height) / (a_diversity_delivery + a_diversity_vaccine + a_diversity_bcg)
print(combined_demographic)
ggsave(combined_demographic,
filename = "demographic_alpha_diversity",
device = "jpg",
height = 12, width = 16, units = "in")
setwd("~/Microbiome/Data Cleaning and Organization")
ps <- readRDS("categorized_data.RDS")
sam <- sample_data(ps)
sam <- data.frame(sam)
sam <- sam |>
dplyr::select(-FinalFamOcc, -OpenFieldDefFinal, -SoilConsumpFinal, -SoilConsumpThinning, -AgeGroupUnderweight, -MatEdThinning, -OpenFieldDefThinning,-WashFruitsThinned, -Foods, -SevStunting, -SevThinning, -logWeight, -logHeight, -logHAZ, -logWAZ, -logBAZ, -Log1Weight, -Log1Height, -Log1WAZ, -Log1HAZ, -Log1BAZ, -lnWeight, -lnHeight, -lnWAZ, -lnBAZ, -sqrtWeight, -sqrtHeight, -sqrtWAZ, -sqrtWAZ, -sqrtHAZ, -sqrtBAZ, -OversqrtWeight, -OversqrtHeight, -OversqrtWAZ, -OversqrtHAZ, -OversqrtBAZ, -sample_data, -lnHAZ)
sam <- sam |>
mutate(SEI_proxy = ifelse((Maternal_Education_Status == "Illiterate" | Maternal_Education_Status == "Primary School") & House_Floor_Material == "Dust" & Kitchen_Separated.In_House == "Separated" & Frequency_of_Bathing_in_River != "never" & Frequency_of_Clothes_Washing_in_River != "never" & Underweight == "Underweight", "Lower","Upper"),
Cleanliness_proxy = ifelse(How_often_do_you_trim_your_fingernails. != "Once per Week" & Use_of_Toilet_Paper_after_Defecation != "always" & Frequency_of_Hand_Washing_After_Using_Toilet != "always" & Frequency_of_Using_Soap_After_Using_Toilet != "always" & Frequency_of_Using_Soap_Before_Eating != "always" & Freqency_of_Washing_Raw.Undercooked_Vegetables != "always" , "Unclean", "Clean"))
sam <- sam |>
rename("Method_of_Washing_Hands_After_Toilet" = Howdoyouwashyourhandsaftertoilet)
sample_data(ps) <- sam
write.csv(sam,"sample_data.csv")
write_rds(ps, "categorized_data.RDS")
setwd("~/Microbiome/Data Analysis")
library(BiocManager)
library(phyloseq)
library(tidyverse)
library(dplyr)
library(ggrepel)
library(patchwork)
library(RColorBrewer)
library(rlang)
library(MicrobiotaProcess)
library(vegan)
library(dplyr)
library(ALDEx2)
library(microbiomeMarker)
library(ggsci)
ps <- readRDS("categorized_data.RDS") # Load in using whatever file name you have
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
#Changing the taxonomic table labels (From Rank 1~Rank 7 to Kingdom~Species)
# Access the existing taxonomy table from the phyloseq object
tax_table_ps <- tax_table(ps)[,1:7]
# Assign the modified taxonomy table back to the phyloseq object
tax_table(ps) <- tax_table_ps
#define list of factors to be tested
factors <- colnames(ps@sam_data)
create_a_diversity_plot <- function(ps,variable){ #function to create an alpha diversity boxplot
# Convert sample data to data frame
sam_data <- as(sample_data(ps), "data.frame")
# First remove NAs
keep_samples <- !is.na(sam_data[[variable]])
ps_filtered <- prune_samples(keep_samples, ps)
# Get updated sample data after NA removal
sam_data_filtered <- as(sample_data(ps_filtered), "data.frame")
# Count occurrences of each value in the variable
value_counts <- table(sam_data_filtered[[variable]])
# Identify values that appear at least 5 times
valid_values <- names(value_counts)[value_counts >= 5]
# Filter samples to only include those with valid values
final_keep_samples <- sam_data_filtered[[variable]] %in% valid_values
ps_final <- prune_samples(final_keep_samples, ps_filtered)
#create the plot
a_diversity_factor<- plot_richness(ps_final, x=variable, color=variable, measures=c("Chao1", "Shannon"))
a_diversity_factor$layers[[2]] = NULL
a_diversity_factor <- a_diversity_factor  + geom_boxplot() + geom_jitter(alpha = 0.25) + theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=18,face="bold")) +
labs(x = gsub("_", " ", variable)) + guides(color=guide_legend(title=gsub("_", " ", variable)))
print(a_diversity_factor) #sneak-peek
#save the file as a pdf with big dimensions
# ggsave(a_diversity_factor,
#        filename = paste(variable,"_boxplot.pdf", sep = ""),
#        device = "pdf",
#        height = 6, width = 12, units = "in")
return(a_diversity_factor)
}
View(sample_data(ps))
# Demographic Factors
a_diversity_age <- create_a_diversity_plot(ps, "Age")
a_diversity_sex <- create_a_diversity_plot(ps, "Sex")
setwd("~/Microbiome/Data Analysis/Figures/Combined Figures For Presentation")
# Demographic Factors
a_diversity_age <- create_a_diversity_plot(ps, "Age")
a_diversity_sex <- create_a_diversity_plot(ps, "Sex")
a_diversity_weight <- create_a_diversity_plot(ps, "Weight")
a_diversity_height <- create_a_diversity_plot(ps, "Height")
a_diversity_delivery <- create_a_diversity_plot(ps, "Mode_of_Delivery")
a_diversity_vaccine <- create_a_diversity_plot(ps, "Vaccinated")
a_diversity_bcg <- create_a_diversity_plot(ps, "BCG_Scar")
combined_demographic <- (a_diversity_age + a_diversity_sex) / (a_diversity_weight + a_diversity_height) / (a_diversity_delivery + a_diversity_vaccine + a_diversity_bcg)
print(combined_demographic)
ggsave(combined_demographic,
filename = "demographic_alpha_diversity",
device = "jpg",
height = 12, width = 16, units = "in")
# Lifestyle Factors
a_diversity_fingernails <- create_a_diversity_plot(ps, "Child_Has_Dirty_Fingernails")
a_diversity_trimming <- create_a_diversity_plot(ps, "Child.s_Fingernails_Trimmed")
a_diversity_trimming_freq <- create_a_diversity_plot(ps, "How_often_do_you_trim_your_fingernails.")
a_diversity_washing_hands_method_toilet <- create_a_diversity_plot(ps, "Method_of_Washing_Hands_After_Toilet")
a_diversity_barefoot <- create_a_diversity_plot(ps, "Frequency_of_Walking_Barefoot")
a_diversity_footwear <- create_a_diversity_plot(ps, "Prefer_Sandals_or_Barefoot_in_House")
a_diversity_raw_veg <- create_a_diversity_plot(ps, "Frequency_of_Eating_Raw.Undercooked_Vegetables")
a_diversity_washing_hands_method_eating <- create_a_diversity_plot(ps, "Method_of_Washing_Hands_Before_Eating")
a_diversity_use_school_latrine <- create_a_diversity_plot(ps, "Frequency_of_Using_School_Latrine")
a_diversity_antibiotic <- create_a_diversity_plot(ps, "Antibiotics")
a_diversity_defecating_field <- create_a_diversity_plot(ps, "Defecating_in_Open_Field")
a_diversity_bathing_river <- create_a_diversity_plot(ps, "Frequency_of_Bathing_in_River")
a_diversity_clothes_river <- create_a_diversity_plot(ps, "Frequency_of_Clothes_Washing_in_River")
combined_lifestyle <- a_diversity_fingernails + a_diversity_trimming + a_diversity_trimming_freq +
a_diversity_washing_hands_method_toilet + a_diversity_washing_hands_method_eating + a_diversity_barefoot +
a_diversity_footwear + a_diversity_raw_veg + a_diversity_use_school_latrine + a_diversity_antibiotic +
a_diversity_defecating_field + a_diversity_bathing_river + a_diversity_clothes_river
print(combined_lifestyle)
ggsave(combined_lifestyle,
filename = "lifestyle_alpha_diversity",
device = "jpg",
height = 18, width = 46, units = "in")
factors
# Clinical Factors
a_diversity_malaria <- create_a_diversity_plot(ps, "Anti.Malarial_Drug")
a_diversity_fever <- create_a_diversity_plot(ps, "Fever_in_Last_Two_Weeks")
a_diversity_diarrhea <- create_a_diversity_plot(ps, "Diarrhea_in_Last_Two_Weeks")
a_diversity_wheezing <- create_a_diversity_plot(ps, "Wheezing_or_Whistling_in_Chest")
combined_clinical <- a_diversity_malaria + a_diversity_fever + a_diversity_diarrhea + a_diversity_wheezing
print(combined_clinical)
ggsave(combined_clinical,
filename = "clinical_alpha_diversity",
device = "jpg",
height = 12, width = 16, units = "in")
# Clinical Factors
a_diversity_malaria <- create_a_diversity_plot(ps, "Anti.Malarial_Drug")
a_diversity_fever <- create_a_diversity_plot(ps, "Fever_in_Last_Two_Weeks")
a_diversity_diarrhea <- create_a_diversity_plot(ps, "Diarrhea_in_Last_Two_Weeks")
a_diversity_wheezing <- create_a_diversity_plot(ps, "How_Many_Times_Wheezing_or_Whistling")
combined_clinical <- a_diversity_malaria + a_diversity_fever + a_diversity_diarrhea + a_diversity_wheezing
print(combined_clinical)
ggsave(combined_clinical,
filename = "clinical_alpha_diversity",
device = "jpg",
height = 12, width = 16, units = "in")
library(phyloseq)
library(glmnet)
library(caret)
library(dplyr)
ps <- readRDS("continuous_data.rds") # read in ps file
setwd("~/Microbiome/Data Cleaning and Organization")
ps <- readRDS("continuous_data.rds") # read in ps file
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
a_diversity <- estimate_richness(ps) # calculate alpha diversity of each sample
sample_data <- ps@sam_data #extract sample data
sample_data$sample <- rownames(sample_data) #create column with sample
a_diversity$sample <- rownames(sample_data) #create same column in diversity object to be able to merge by
sample_data <- data.frame(sample_data) #convert sample data to data frame for merging
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) |> #merge the data together
dplyr::select(-sample_data)
View(a_diversity)
?lm
a_diversity <- a_diversity |> # remove sample column now that it's not needed
dplyr::select(-sample)
a_diversity <- mutate_if(a_diversity, is.character, as.factor) #change all character columns to factor
a_diversity <- a_diversity %>%
dplyr::select_if(~ !(is.factor(.) & nlevels(.) == 1)) # remove all columns where factor only has one level
a_diversity <- a_diversity |>
mutate(Chao_Shannon = (Chao1 + Shannon))
a_diversity <- a_diversity %>%
dplyr::select_if(~ length(unique(.)) > 1) # remove all columns where numeric has only one level
ps <- readRDS("continuous_data.rds") # read in ps file
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
a_diversity <- estimate_richness(ps) # calculate alpha diversity of each sample
sample_data <- ps@sam_data #extract sample data
sample_data$sample <- rownames(sample_data) #create column with sample
a_diversity$sample <- rownames(sample_data) #create same column in diversity object to be able to merge by
sample_data <- data.frame(sample_data) #convert sample data to data frame for merging
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) |> #merge the data together
dplyr::select(-sample_data)
a_diversity <- a_diversity |> # remove sample column now that it's not needed
dplyr::select(-sample)
a_diversity <- mutate_if(a_diversity, is.character, as.factor) #change all character columns to factor
a_diversity <- a_diversity %>%
dplyr::select_if(~ !(is.factor(.) & nlevels(.) == 1)) # remove all columns where factor only has one level
a_diversity <- a_diversity |>
mutate(Chao_plus = Chao1/mean(a_diversity$Chao1)*100,
Shannon_plus = Shannon/mean(a_diversity$Shannon)*100,
Chao_Shannon = (Chao1_plus + Shannon_plus))
a_diversity <- a_diversity |>
mutate(Chao_plus = Chao1/mean(a_diversity$Chao1)*100,
Shannon_plus = Shannon/mean(a_diversity$Shannon)*100,
Chao_Shannon = (Chao_plus + Shannon_plus))
ps <- readRDS("continuous_data.rds") # read in ps file
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
a_diversity <- estimate_richness(ps) # calculate alpha diversity of each sample
sample_data <- ps@sam_data #extract sample data
sample_data$sample <- rownames(sample_data) #create column with sample
a_diversity$sample <- rownames(sample_data) #create same column in diversity object to be able to merge by
sample_data <- data.frame(sample_data) #convert sample data to data frame for merging
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) |> #merge the data together
dplyr::select(-sample_data)
a_diversity <- a_diversity |> # remove sample column now that it's not needed
dplyr::select(-sample)
a_diversity <- mutate_if(a_diversity, is.character, as.factor) #change all character columns to factor
a_diversity <- a_diversity %>%
dplyr::select_if(~ !(is.factor(.) & nlevels(.) == 1)) # remove all columns where factor only has one level
a_diversity <- a_diversity |>
mutate(Chao_plus = Chao1/mean(a_diversity$Chao1)*100,
Shannon_plus = Shannon/mean(a_diversity$Shannon)*100,
Chao_Shannon = (Chao_plus + Shannon_plus)/2)
View(a_diversity)
a_diversity <- a_diversity %>%
dplyr::select_if(~ length(unique(.)) > 1) # remove all columns where numeric has only one level
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity) # generate linear models of data with all the variables
a_diversity <- a_diversity %>%
dplyr::select_if(~ length(unique(.)) > 1) # remove all columns where numeric has only one level
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity) # generate linear models of data with all the variables
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity, na.action = na.omit()) # generate linear models of data with all the variables
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity, na.action = na.omit) # generate linear models of data with all the variables
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity, na.action = "na.omit") # generate linear models of data with all the variables
a_diversity <- mutate_if(a_diversity, is.character, as.factor) #change all character columns to factor
a_diversity <- a_diversity %>%
dplyr::select_if(~ !(is.factor(.) & nlevels(.) == 1)) # remove all columns where factor only has one level
ps <- readRDS("continuous_data.rds") # read in ps file
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
a_diversity <- estimate_richness(ps) # calculate alpha diversity of each sample
sample_data <- ps@sam_data #extract sample data
sample_data$sample <- rownames(sample_data) #create column with sample
a_diversity$sample <- rownames(sample_data) #create same column in diversity object to be able to merge by
sample_data <- data.frame(sample_data) #convert sample data to data frame for merging
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) |> #merge the data together
dplyr::select(-sample_data)
a_diversity <- a_diversity |> # remove sample column now that it's not needed
dplyr::select(-sample)
a_diversity <- mutate_if(a_diversity, is.character, as.factor) #change all character columns to factor
a_diversity <- a_diversity %>%
dplyr::select_if(~ !(is.factor(.) & nlevels(.) == 1)) # remove all columns where factor only has one level
a_diversity <- a_diversity |>
mutate(Chao_plus = Chao1/mean(a_diversity$Chao1)*100,
Shannon_plus = Shannon/mean(a_diversity$Shannon)*100,
Chao_Shannon = (Chao_plus + Shannon_plus)/2)
a_diversity <- a_diversity %>%
dplyr::select_if(~ length(unique(.)) > 1) # remove all columns where numeric has only one level
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity) # generate linear models of data with all the variables
ps <- readRDS("categorized_data.rds") # read in ps file
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
a_diversity <- estimate_richness(ps) # calculate alpha diversity of each sample
sample_data <- ps@sam_data #extract sample data
sample_data$sample <- rownames(sample_data) #create column with sample
a_diversity$sample <- rownames(sample_data) #create same column in diversity object to be able to merge by
sample_data <- data.frame(sample_data) #convert sample data to data frame for merging
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) |> #merge the data together
dplyr::select(-sample_data)
a_diversity <- mutate_if(a_diversity, is.character, as.factor) #change all character columns to factor
a_diversity <- a_diversity %>%
dplyr::select_if(~ !(is.factor(.) & nlevels(.) == 1)) # remove all columns where factor only has one level
a_diversity <- a_diversity |>
mutate(Chao_plus = Chao1/mean(a_diversity$Chao1)*100,
Shannon_plus = Shannon/mean(a_diversity$Shannon)*100,
Chao_Shannon = (Chao_plus + Shannon_plus)/2)
a_diversity <- a_diversity %>%
dplyr::select_if(~ length(unique(.)) > 1) # remove all columns where numeric has only one level
View(a_diversity)
View(sample_data)
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) |> #merge the data together
dplyr::select(-sample_data)
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) |> #merge the data together
a_diversity <- a_diversity |> # remove sample column now that it's not needed
dplyr::select(-sample)
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) #merge the data together
a_diversity <- a_diversity |> # remove sample column now that it's not needed
dplyr::select(-sample)
a_diversity <- mutate_if(a_diversity, is.character, as.factor) #change all character columns to factor
a_diversity <- a_diversity %>%
dplyr::select_if(~ !(is.factor(.) & nlevels(.) == 1)) # remove all columns where factor only has one level
a_diversity <- a_diversity |>
mutate(Chao_plus = Chao1/mean(a_diversity$Chao1)*100,
Shannon_plus = Shannon/mean(a_diversity$Shannon)*100,
Chao_Shannon = (Chao_plus + Shannon_plus)/2)
a_diversity <- a_diversity %>%
dplyr::select_if(~ length(unique(.)) > 1) # remove all columns where numeric has only one level
?estimate_richness
ps <- readRDS("categorized_data.rds") # read in ps file
#Rarefy Data
set.seed(13)
ps <- rarefy_even_depth(ps, 1e+05)
a_diversity <- estimate_richness(ps, measures = c("Shannon", "Chao1")) # calculate alpha diversity of each sample
sample_data <- ps@sam_data #extract sample data
sample_data$sample <- rownames(sample_data) #create column with sample
a_diversity$sample <- rownames(sample_data) #create same column in diversity object to be able to merge by
sample_data <- data.frame(sample_data) #convert sample data to data frame for merging
a_diversity <- merge(sample_data, a_diversity, by = c("sample")) #merge the data together
a_diversity <- a_diversity |> # remove sample column now that it's not needed
dplyr::select(-sample)
a_diversity <- mutate_if(a_diversity, is.character, as.factor) #change all character columns to factor
a_diversity <- a_diversity %>%
dplyr::select_if(~ !(is.factor(.) & nlevels(.) == 1)) # remove all columns where factor only has one level
a_diversity <- a_diversity |>
mutate(Chao_plus = Chao1/mean(a_diversity$Chao1)*100,
Shannon_plus = Shannon/mean(a_diversity$Shannon)*100,
Chao_Shannon = (Chao_plus + Shannon_plus)/2)
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity[,1:119]) # generate linear models of data with all the variables
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity[,1:119,127]) # generate linear models of data with all the variables
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity[,c(1:119,127)]) # generate linear models of data with all the variables
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity[,c(1:92,107:110, 127)]) # generate linear models of data with all the variables
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity[,c(1:92,107:110, 127)], na.action = na.exclude) # generate linear models of data with all the variables
sapply(a_diversity, function(x) if(is.factor(x)) length(levels(x)) else 0)
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity[,c(1:92,107:110, 127)], na.action = na.exclude) # generate linear models of data with all the variables
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity, na.action = na.exclude) # generate linear models of data with all the variables
Chao_Shannon =lm(Chao_Shannon ~ . , data=a_diversity[,c(1:121,127)], na.action = na.omit) # generate linear models of data with all the variables
levels(na.omit(a_diversity))
length(levels(na.omit(a_diversity)))
clean_data <- na.omit(a_diversity)
sapply(clean_data, function(x) if(is.factor(x)) length(unique(x)) else 0)
remove_na_columns <- function(df) {
# Check which columns have any NA values
na_columns <- sapply(df, function(x) any(is.na(x)))
# Keep only columns without NAs
df_clean <- df[, !na_columns, drop = FALSE]
return(df_clean)
}
a_diversity <- remove_na_columns(a_diversity)
Shannon <- lm(Chao_Shannon ~ ., data = a_diversity[, c(1:68, 74)])
removeAliased <- function(mod) { # removes variables with colinearity
## Retrieve all terms in the model
X <- attr(mod$terms, "term.label")
## Get the aliased coefficients
rn <- rownames(alias(mod)$Complete)
## remove factor levels from coefficient names to retrieve the terms
regex.base <- unique(unlist(lapply(mod$model[, sapply(mod$model, is.factor)], levels)))
aliased <- gsub(paste(regex.base, "$", sep = "", collapse = "|"),  "", gsub(paste(regex.base, ":", sep = "", collapse = "|"), ":", rn))
uF <- formula(paste(". ~ .", paste(aliased, collapse = "-"), sep = "-"))
update(mod, uF)
}
model <- lm(Chao_Shannon ~ ., data = a_diversity[, c(1:68, 74)])
model <- removeAliased(model) # remove colinear variables from data
removeAliased <- function(mod) { # removes variables with colinearity
## Retrieve all terms in the model
X <- attr(mod$terms, "term.label")
## Get the aliased coefficients
rn <- rownames(alias(mod)$Complete)
## remove factor levels from coefficient names to retrieve the terms
regex.base <- unique(unlist(lapply(mod$model[, sapply(mod$model, is.factor)], levels)))
aliased <- gsub(paste(regex.base, "$", sep = "", collapse = "|"),  "", gsub(paste(regex.base, ":", sep = "", collapse = "|"), ":", rn))
uF <- formula(paste(". ~ .", paste(aliased, collapse = "-"), sep = "-"))
update(mod, uF)
}
model <- removeAliased(model) # remove colinear variables from data
removeAliased <- function(mod) {
# Check if there are any aliased terms
aliased_info <- alias(mod)
if (is.null(aliased_info$Complete)) {
return(mod)  # Return original model if no aliasing
}
# Retrieve aliased terms
rn <- rownames(aliased_info$Complete)
# Handle factor levels in coefficient names
factor_vars <- mod$model[, sapply(mod$model, is.factor), drop = FALSE]
regex.base <- if (ncol(factor_vars) > 0) {
unique(unlist(lapply(factor_vars, levels)))
} else {
character(0)
}
# Clean coefficient names to match formula terms
aliased <- if (length(regex.base) > 0) {
gsub(paste0(regex.base, "$", collapse = "|"), "",
gsub(paste0(regex.base, ":", collapse = "|"), ":", rn))
} else {
rn
}
# Skip if no aliased terms left after cleaning
if (length(aliased) == 0) {
return(mod)
}
# Update formula (safely)
uF <- reformulate(".", response = ".",
drop.terms = terms(reformulate(aliased)),
intercept = attr(mod$terms, "intercept"))
update(mod, uF)
}
model <- removeAliased(model) # remove colinear variables from data
#Perform Multivariable Linear Regression
summary(model)
#perform stepwise regression
library(MASS)
model = stepAIC(model, direction = "both", trace = FALSE) # Stepwise regression model with shannon measure
model_summary <- summary(model)
model_coeffs <- data.frame(model_summary$coefficients)
model_coeffs <- round_df(model_coeffs, 4) #round each data frame to four decimal places
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1)) #function that rounds all the numbers in the dataframe
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
model_coeffs <- round_df(model_coeffs, 4) #round each data frame to four decimal places
View(model_coeffs)
model_coeffs <- model_coeffs[-1,]
View(model_coeffs)
library(pwr)
r2  = summary(model)$r.squared          # R-squared for our linear model
my.f2 = r2 / (1-r2)                         # Effect Size
print(r2)
print(my.f2)
